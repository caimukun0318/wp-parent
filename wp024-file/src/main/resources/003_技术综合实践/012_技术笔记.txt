2019年12月5日
02 （进阶篇）Java程序性能优化  让你的Java程序更快、更稳定.pdf
	08 享元模式是设计模式中少数几个以提高系统性能为目的的模式之一.它的核心思想是:
		如果在一个系统中存在多个相同的对象,那么只需共享一份对象的拷贝,而不必为
		每一次使用都创建新的对象.在享元模式中,由于需要构造和维护这些可以共享的对象,
		因此,常常会出现一个工厂类,用于维护和创建对象.



	07 代理模式的使用场景
		延迟加载,基于远程调用的网络代理,考虑安全因素的安全代理
		

	06 性能调优的层次
		05 操作系统的性能调优
			
		04 数据库调优
			03 对数据库软件进行优化
			02 对数据库进行优化
			01 在应用层对sql语句进行优化

		03 JVM调优	
			设置合理的jvm启动参数

		02 代码调优
			同样作为List的实现,LinkedList和ArrayList在随机访问上的性能却可以相差几个数量级
			
		01 设计调优
			比如使用通知方式的观察者模式来取代存在性能隐患的循环监控 

	05 Amdahl定律
		加速比定义: 加速比 = 优化前系统耗时/优化后系统耗时

	04 最有可能成为系统瓶颈的计算资源如下.
		07 内存
		06 锁竞争
		05 数据库
		04 异常
		03 CPU
		02 网络操作
		01 磁盘I/O

	03 木桶理论
		即使系统拥有充足的内存资源和CPU资源,但是如果I/O性能低下,那么系统的总体性能是取决于当前最慢的磁盘I/O速度,
		而不是当前最优越的CPU或者内存.在这种情况下,如果需要进一步提升系统性能,优化内存或者CPU资源是毫无用处的。
		只有提高磁盘IO的性能才能对系统的整体性能进行优化,而此时,磁盘I/O就是系统的性能瓶颈.

	02 性能的衡量指标
		执行时间:一段代码从开始运行到运行结束,所使用的时间
		CPU时间:函数或者线程占用CPU的时间
		内存分配:程序在运行时占用的内存空间
		磁盘吞吐量:描述I/O的使用情况
		网络吞吐量:描述网络的使用情况
		响应时间:系统对某用户行为或者事件做出响应的时间.响应时间越短,性能越好
		
	01 程序的性能通过以下几个方面来体现
		执行速度:程序的反应是否迅速,响应时间是否足够短
		内存分配:内存分配是否合理,是否过多的消耗内存或存在泄漏
		启动时间:程序从运行到可以正常处理业务需要花费多少时间
		负载承受能力:当系统压力上升时,系统的执行速度,响应时间的上升曲线是否平缓
		
01 架构之美-软件架构的艺术

	04 我们需要重新考虑并探讨如下一些重要问题:
		07 如果我们要研发十几个功能相似的产品,该如何高效地工作呢?
		06 十年前开发的产品,架构文档残缺不全,设计人员已经离职,怎么把产品的架构从纷繁复杂的头绪中清理出来呢?
		05 软件产品在演化,软件架构也会跟随演化,如何应对这种变化?
		04 当我们阶段性的完成了架构的构建,如何去评估结果呢?
		03 当我们用正向工程的方法构建软件架构时,怎么做才能构建出满意的高品质架构及设计呢?
		02 当面临构建一个软件产品时,应该采用怎样的流程去工作呢?
		01 什么才是一个真正意义上的软件架构师?
		

	03 Silver bullets do not exist;		世上没有万能的解药

	   Any framework or middleware can only help you in doing your job,but it cannot do your job for you;	
	   框架或中间件是用来帮助你的,而不是代替你去思考和工作的.

	02 我们应该寄希望于自己来构建系统化架构,使其能够做到:
		04 当我们设计的重要实时系统(例如航空管制系统)出现错误时,能快速实现系统的自我恢复
		03 当系统资源使用频繁且负荷增加时,系统能够很好地协调资源的运用。
		02 当系统面临大量并发事件时,能够很好地进行调度和并行处理
		01 即使是最大峰值运行时,系统也要有很好的性能
		
	01 真正意义上的软件架构:
		06 我们的系统能够与其他系统进行集成
		05 最大峰值时,系统还能保持运行,系统性能不会明显下降
		04 架构设计人员能够确定当前运行系统的下一个时刻的状态
		03 当系统用户数量随着业务的扩展而增加,我们的架构还能应对.
		02 我们需要一个方便维护的系统来满足可维护性的要求
	01 好的系统,一定是一个架构灵活的系统
